<?phpnamespace App\Grids\Admin;use App\AdminModule\Presenters\FakturaPresenter;use App\Model\FakturaModel;use Nette\Database\Context;use Nette\Utils\Html;use NiftyGrid\DataSource\NDataSource;use NiftyGrid\DuplicateButtonException;use NiftyGrid\DuplicateColumnException;use NiftyGrid\Grid;use NiftyGrid\InvalidFilterException;use NiftyGrid\UnknownFilterException;/** * Description of FakturaGrid * @deprecated * @author Martin Patyk */class FakturaGrid extends Grid{    use AdminGridButtonTrait;    private $model;    private $odberatelAutoComplete;    public function __construct(Context $db)    {        parent::__construct();        $this->model = $db->table(FakturaModel::TABLE_NAME);        $localModel = clone $this->model;        $this->odberatelAutoComplete = $localModel            ->select('odberatel_nazev');        #->groupBy('odberatel_nazev');        #$this->modelOdberatel = $db->table('faktura');        unset($localModel);    }    /**     * @param FakturaPresenter $presenter     * @throws UnknownFilterException     * @throws InvalidFilterException     * @throws DuplicateColumnException     * @throws DuplicateButtonException     */    protected function configure($presenter)    {        //Vytvoříme si zdroj dat pro Grid        //Při výběru dat vždy vybereme id        $source = new NDataSource(            $this->model->select('faktura.id')                # ->select('CONCAT(YEAR(NOW()),LPAD(faktura.id,6,"0")) AS vs')                ->select('vs')                ->select('dodavatel_nazev')                ->select('odberatel_nazev')                ->select('splatnost')                ->select('datum_vystaveni')                ->select('datum_splatnosti')                ->select('pdf_soubor')                ->select('IFNULL(datum_zaplaceni,"Nezaplaceno") AS datum_zaplaceni')                ->select('CONCAT(vytvoril.jmeno," ",vytvoril.prijmeni) AS vytvoril')                ->select('IFNULL(pdf_soubor,"- - -") AS faktura_pdf')//->select('odberatel.nazev AS odberatel')//->select('splatnost,datum_vystaveni,datum_splatnosti,datum_zaplaceni,faktura.id')        );        $this->addColumn('vs', 'VS', '80px')            #->setTableName('incident.id')            ->setRenderer(function ($row) use ($presenter) {                return Html::el('a')->setText($row['vs'])->href($presenter->link("Faktura:edit", $row['id']));            })            ->setNumericFilter();        $this->addColumn('faktura_pdf', 'Faktura PDF')            ->setRenderer(function ($row) use ($presenter) {                if ($row['faktura_pdf'] !== '- - -') {                    return Html::el('a')->setText($row['faktura_pdf'])                        #->href($presenter->link());                        ->href($presenter->getAppParameterService()->getBasePath() . '/facka/' . $row['faktura_pdf']);                } else {                    return $row['faktura_pdf'];                }            });        $this->addColumn('dodavatel_nazev', 'Dodavatel');        $this->addColumn('odberatel_nazev', 'Odberatel')            ->setTableName('odberatel_nazev')            ->setTextFilter()            ->setAutocomplete($this->odberatelAutoComplete);        #$this->addColumn('splatnost', 'Splatnost', '100px');        $this->addColumn('datum_vystaveni', 'Datum vystaveni', '140px');        $this->addColumn('datum_splatnosti', 'Datum splatnosti', '140px');        $this->addColumn('datum_zaplaceni', 'Datum zaplaceni', '140px');        $this->addColumn('vytvoril', 'Vytvoril');        $this->pdfButton($presenter);        $this->editButton($presenter);        $this->deleteButton($presenter);        //Předáme zdroj        $this->setDataSource($source);        $this->setDefaultOrder("datum_vystaveni DESC");    }}