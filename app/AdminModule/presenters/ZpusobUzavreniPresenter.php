<?php/** * Description of ZpusobUzavreniPresenter * * @author Martin Patyk */namespace App\AdminModule\Presenters;use App\Factory\Forms\ZpusobUzavreniFormFactory;use App\Factory\Grids\ZpusobUzavreniDataGridFactory;use App\Model\ZpusobUzavreniModel;use Exception;use Nette\Application\AbortException;use Nette\Application\BadRequestException;use Nette\Forms\Form;use Tracy\Debugger;use Nette\InvalidArgumentException;use Tracy\ILogger;use Ublaboo\DataGrid\DataGrid;use Ublaboo\DataGrid\Exception\DataGridException;class ZpusobUzavreniPresenter extends AdminbasePresenter{    private ZpusobUzavreniModel $zpusobUzavreniModel;    private ZpusobUzavreniDataGridFactory $zpusobUzavreniDataGrid;    private ZpusobUzavreniFormFactory $zpusobUzavreniFormFactory;    /**     * @param ZpusobUzavreniModel $zpusobUzavreniModel     * @param ZpusobUzavreniDataGridFactory $zpusobUzavreniDataGrid     * @param ZpusobUzavreniFormFactory $zpusobUzavreniFormFactory     */    public function __construct(        ZpusobUzavreniModel           $zpusobUzavreniModel,        ZpusobUzavreniDataGridFactory $zpusobUzavreniDataGrid,        ZpusobUzavreniFormFactory     $zpusobUzavreniFormFactory    )    {        parent::__construct();        $this->zpusobUzavreniModel = $zpusobUzavreniModel;        $this->zpusobUzavreniDataGrid = $zpusobUzavreniDataGrid;        $this->zpusobUzavreniFormFactory = $zpusobUzavreniFormFactory;    }    /**     * Cast DEFAULT, definice Gridu     * @throws DataGridException     */    protected function createComponentGrid(): DataGrid    {        return $this->zpusobUzavreniDataGrid->create();    }    public function renderDefault()    {        $this->setView('../_default');    }    /**     * Cast ADD     */    public function renderAdd()    {        $this->setView('../_add');    }    public function createComponentAdd(): Form    {        $form = $this->zpusobUzavreniFormFactory->create();        $form->onSuccess[] = [$this, 'add'];        return $form;    }    /**     * @throws AbortException     */    public function add(Form $form)    {        try {            $v = $form->getValues();            $v->offsetUnset('id');            $this->zpusobUzavreniModel->insertNewItem($v);        } catch (Exception $exc) {            Debugger::log($exc->getMessage(), ILogger::ERROR);            $form->addError('Nový záznam nebyl přidán');        }        $this->flashMessage('Nový záznam byl přidán');        $this->redirect('default');    }    /**     * Cast EDIT     * @param int $id Identifikator polozky     * @throws AbortException     * @throws BadRequestException     */    public function renderEdit(int $id)    {        try {            $this->setView('../_edit');            // upravene hodnoty odeslu do formulare            $this['edit']->setDefaults($this->zpusobUzavreniModel->fetchById($id));        } catch (InvalidArgumentException $exc) {            $this->flashMessage($exc->getMessage());            $this->redirect('default');        }    }    public function createComponentEdit(): Form    {        $form = $this->zpusobUzavreniFormFactory->create();        $form->onSuccess[] = [$this, 'edit'];        return $form;    }    /**     * @throws AbortException     */    public function edit(Form $form)    {        try {            $v = $form->getValues();            $this->zpusobUzavreniModel->updateItem($v, $v['id']);        } catch (Exception $exc) {            Debugger::log($exc->getMessage(), ILogger::ERROR);            $form->addError('Záznam nebyl změněn');        }        $this->flashMessage('Záznam byl úspěšně změněn');        $this->redirect('default');    }    /**     * Cast DROP     * @param int $id Identifikator polozky     * @throws AbortException     */    public function actionDrop(int $id)    {        try {            $this->zpusobUzavreniModel->fetchById($id);            $this->zpusobUzavreniModel->removeItem($id);            $this->flashMessage('Položka byla odebrána'); // Položka byla odebrána            $this->redirect('ZpusobUzavreni:default'); // change it !!!        } catch (InvalidArgumentException $exc) {            $this->flashMessage($exc->getMessage());            $this->redirect('ZpusobUzavreni:default'); // change it !!!        } catch (Exception $exc) {            $this->flashMessage('Položka nebyla odabrána, zkontrolujte závislosti na položku');            $this->redirect('ZpusobUzavreni:default'); // change it !!!        }    }}