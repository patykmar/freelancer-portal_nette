<?php/** * Virtualni Shift Supervisor * * @author Martin Patyk */namespace App\CronModule;use greeny\MailLibrary\Drivers\ImapDriver;use Nette\ArrayHash;use Nette\Database\Table\Selection;use App\Model;final class SsPresenter extends CronBasePresenter{    /** @var ImapDriver */    private $driver;    /** @var Selection databaze tasku k incidentu */    private $modelIncident;    /** @var int identita uzivatele shift supervisor */    private $identity = 9;    public function __construct()    {        parent::__construct();        //$this->driver = new MailLibrary\Drivers\ImapDriver('webalerts@patyk.cz', 'Zu7tp0ic32vSeiUa8DUt', 'mail.patyk.cz', 143, FALSE);        #$this->modelIncident = $this->context->database->context->table('incident');        $this->modelIncident = new Model\IncidentModel;    }    /**     * Funkce presouva uzavrene tikety na frontu service desku     * @return void     */    public function actionSmartShiftSupervisor()    {        // Nactu si vsechny tikety ktere jsou ve stavu vyresene - id = 4        $tikety = $this->modelIncident->fetchAllIdByStav(4);        /*         * Pote je presunu tiket na SD (id=2).         * Identita systemoveho uzivatele je SS (id=9)         */        foreach ($tikety as $row) {            $change = new ArrayHash();            $change->offsetSet('fronta_osoba', 2);            $change->offsetSet('identity', $this->identity);            $change->offsetSet('incident_stav', 6);  // nastavim stav na "Čeká se na vyjádření zákazníka"            $change->offsetSet('odezva_cekam', 1); // nastavim moznost vlozeni zpetne vazby            $this->modelIncident->update($change, $row['id']);            unset($change);        }        //	hotovo dvacet vybavene :)        $this->terminate();    }    /**     * Funkce nacte otevrene tikety na fronte SD a ty pak na zaklade CI umisti na     * frontu 2nd level specialistu.     */    public function actionFromSdToSecondLevel()    {        //	nactu si vsechny otevrene tikety - id = 1        #$tikety = $this->modelIncident->fetchAllIdByStav(1);        $model = $this->modelIncident->fetchFactory();        $model            ->select('[ci].[fronta_tier_2]') // na zaklade CI zjistim na jakou frontu se tiket posle            ->select('[fronta_osoba].[id]')->as('fronta_osoba_id')            ->where('incident_stav')->in('(1,7)') // nactu si otevrene a znovu otevrene tikety            ->innerJoin('ci')->on('([incident].[ci] = [ci].[id])')            ->leftJoin('[fronta_osoba]')->on('[fronta_osoba].[fronta] = [ci].[fronta_tier_2]')            ->and('[fronta_osoba].[osoba] = %i', 9); // 9 = SS        foreach ($model->fetchAll() as $row) {            $change = new ArrayHash;            $change->offsetSet('fronta_osoba', $row['fronta_osoba_id']); // posilam na SS TIER 2 level            $change->offsetSet('incident_stav', 2);      // menim stav na prirazen            $change->offsetSet('identity', $this->identity);            $this->modelIncident->update($change, $row['id']);            unset($change);        }        unset($model);        //	hotovo dvacet vybavene :)        $this->terminate();    }    /**     * Nacte vsechny tikety ktere jsou na SS a priradi je na specialisty v dane     */    public function actionAssignToSpecialist()    {        $tikety = $this->modelIncident->fetchAllSsTickets();        foreach ($tikety as $tiketId => $specialista) {            $change = new ArrayHash;            // ID specialisty vybrane nahodne            $change->offsetSet('fronta_osoba', array_rand($specialista, 1));            $change->offsetSet('identity', $this->identity);            $this->modelIncident->update($change, $tiketId);            unset($change);        }        //	hotovo dvacet vybavene :)        $this->terminate();    }}