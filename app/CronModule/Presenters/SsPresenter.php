<?php/** * Virtualni Shift Supervisor * * @author Martin Patyk */namespace App\CronModule\Presenters;use App\Factory\ImapDriverFactory;use App\Model\IncidentModel;use greeny\MailLibrary\Drivers\ImapDriver;use Nette\Application\AbortException;use Nette\Database\Table\Selection;use Nette\Utils\ArrayHash;final class SsPresenter extends CronBasePresenter{    private ImapDriver $driver;    /** @var Selection databaze tasku k incidentu */    private $modelIncident;    /** @var int identita uzivatele shift supervisor */    private $identity = 9;    public function __construct(IncidentModel $incidentModel, ImapDriverFactory $imapDriverFactory)    {        parent::__construct();        $this->modelIncident = $incidentModel;        $this->driver = $imapDriverFactory->create();    }    /**     * Funkce presouva uzavrene tikety na frontu service desku     * @return void     * @throws AbortException     */    public function actionSmartShiftSupervisor()    {        // Nactu si vsechny tikety ktere jsou ve stavu vyresene - id = 4        $tikety = $this->modelIncident->fetchAllIdByStav(4);        /*         * Pote je presunu tiket na SD (id=2).         * Identita systemoveho uzivatele je SS (id=9)         */        foreach ($tikety as $row) {            $change = new ArrayHash();            $change->offsetSet('fronta_osoba', 2);            $change->offsetSet('identity', $this->identity);            $change->offsetSet('incident_stav', 6);  // nastavim stav na "Čeká se na vyjádření zákazníka"            $change->offsetSet('odezva_cekam', 1); // nastavim moznost vlozeni zpetne vazby            $this->modelIncident->update($change, $row['id']);            unset($change);        }        //hotovo dvacet vybavene :)        $this->terminate();    }    /**     * Funkce nacte otevrene tikety na fronte SD a ty pak na zaklade CI umisti na     * frontu 2nd level specialistu.     * @throws AbortException     */    public function actionFromSdToSecondLevel()    {        //nactu si vsechny otevrene tikety - id = 1        #$tikety = $this->modelIncident->fetchAllIdByStav(1);        $openedTicked = $this->modelIncident->retrieveAllTicketWhichAreInStateOpenAndReOpened();        foreach ($openedTicked as $row) {            $change = new ArrayHash;            $change->offsetSet('fronta_osoba', $row['fronta_osoba_id']); // posilam na SS TIER 2 level            $change->offsetSet('incident_stav', 2);      // menim stav na prirazen            $change->offsetSet('identity', $this->identity);            $this->modelIncident->update($change, $row['id']);            unset($change);        }        unset($openedTicked);        //hotovo dvacet vybavene :)        $this->terminate();    }    /**     * Nacte vsechny tikety ktere jsou na SS a priradi je na specialisty v dane     * @throws AbortException     */    public function actionAssignToSpecialist()    {        $tikety = $this->modelIncident->fetchAllSsTickets();        foreach ($tikety as $tiketId => $specialista) {            $change = new ArrayHash;            // ID specialisty vybrane nahodne            $change->offsetSet('fronta_osoba', array_rand($specialista));            $change->offsetSet('identity', $this->identity);            $this->modelIncident->update($change, $tiketId);            unset($change);        }        // hotovo dvacet vybavene :)        $this->terminate();    }}